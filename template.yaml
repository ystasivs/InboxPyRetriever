AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: inbox-py-retriever

Globals:
  Function:
    Timeout: 60

Parameters:
  DBName:
    Type: String
    Description: 'Name of the PostgreSQL database'
    Default: 'emails'

  DBUsername:
    Type: String
    Description: 'Username for the PostgreSQL database'
    Default: 'postgres'

  DBPassword:
    Type: String
    Description: 'Password for the PostgreSQL database'
    Default: 'postgres'

  UserEmail:
    Type: String
    Description: 'email address'
    Default: 'no1emailname@gmail.com'

  UserPassword:
    Type: String
    Description: 'Application password'
    Default: 'fycf pvil rgcj wqez'

Resources:
  MyDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: postgres
      DBName: !Ref 'DBName'
      MasterUsername: !Ref 'DBUsername'
      MasterUserPassword: !Ref 'DBPassword'
      AllocatedStorage: '20'
      DBInstanceIdentifier: !Sub ${AWS::StackName}-db
      DBInstanceClass: db.m5d.large
      EngineVersion: '15.4'
      PubliclyAccessible: true

  InitializeDatabaseLambda:
    Type: AWS::Serverless::Function
    DependsOn: MyDatabase
    Properties:
      CodeUri: src/
      Handler: initialize_db.lambda_handler
      Role: !GetAtt InitializeDatabaseLambdaRole.Arn
      FunctionName: !Sub ${AWS::StackName}-init-db
      Runtime: python3.9
      Timeout: 60
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_CONNECTION:
            Fn::Sub:
              - '${DBUsername}:${DBPassword}@${DBHost}:${DBPort}/${DBName}'
              - DBUsername: !Ref 'DBUsername'
                DBPassword: !Ref 'DBPassword'
                DBHost: !GetAtt MyDatabase.Endpoint.Address
                DBPort: !GetAtt MyDatabase.Endpoint.Port
                DBName: !Ref 'DBName'

  InitializeDatabaseLambdaRole:
    Type: AWS::IAM::Role
    DependsOn: MyDatabase
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInitDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'rds:DescribeDBInstances'
                  - 'rds:CreateDBSnapshot'
                  - 'rds:RestoreDBInstanceFromDBSnapshot'
                  - 'lambda:InvokeFunction'
                Resource: '*'

  InitializeDatabase:
    Type: Custom::InitDB
    DependsOn: InitializeDatabaseLambda
    Properties:
      ServiceToken: !GetAtt InitializeDatabaseLambda.Arn

  InboxRetrieverLambdaRole:
    Type: AWS::IAM::Role
    DependsOn: MyDatabase
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InboxRetrieverPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'rds-db:connect'
                  - 'rds-db:execute-sql'
                Resource: '*'

  InboxRetrieverLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: inbox_retriever.inbox_retriever
      Role: !GetAtt InboxRetrieverLambdaRole.Arn
      FunctionName: !Sub ${AWS::StackName}-inbox-retriever
      Runtime: python3.9
      Timeout: 60
      Architectures:
        - x86_64
      Environment:
        Variables:
          USER_EMAIL: !Ref 'UserEmail'
          PASSWORD: !Ref 'UserPassword'
          DB_CONNECTION:
            Fn::Sub:
              - '${DBUsername}:${DBPassword}@${DBHost}:${DBPort}/${DBName}'
              - DBUsername: !Ref 'DBUsername'
                DBPassword: !Ref 'DBPassword'
                DBHost: !GetAtt MyDatabase.Endpoint.Address
                DBPort: !GetAtt MyDatabase.Endpoint.Port
                DBName: !Ref 'DBName'
      Events:
        MyScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: 'cron(0 11 * * ? *)'